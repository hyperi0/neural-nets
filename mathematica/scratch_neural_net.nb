(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    176131,       3301]
NotebookOptionsPosition[    170749,       3206]
NotebookOutlinePosition[    171240,       3224]
CellTagsIndexPosition[    171197,       3221]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Network Implementation", "Title",
 CellChangeTimes->{{3.901023259449683*^9, 3.901023264590308*^9}, {
  3.903165864814767*^9, 
  3.903165868869464*^9}},ExpressionUUID->"ca3228e6-303f-43ae-8a31-\
1f1db99b771c"],

Cell[CellGroupData[{

Cell["Function Definitions", "Section",
 CellChangeTimes->{{3.901023251546047*^9, 
  3.901023255934657*^9}},ExpressionUUID->"04a6c63a-cf94-442e-a622-\
d92ff422cef2"],

Cell[CellGroupData[{

Cell["Basic network functionality", "Subsubsection",
 CellChangeTimes->{{3.901024616772842*^9, 3.901024634445526*^9}, {
  3.903172246209255*^9, 
  3.9031722627676477`*^9}},ExpressionUUID->"ca5b47ac-52a1-4b2e-8d69-\
d5d72eb6fdb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "initialize", " ", "new", " ", "linear", " ", "layer", " ", "with", " ", 
    "randomly", " ", "distributed", " ", "weights", " ", "and", " ", 
    "biases"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"linearLayer", "[", 
     RowBox[{"inputs_", ",", " ", "neurons_", ",", " ", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", "\n", "\t", 
    RowBox[{"<|", "\[IndentingNewLine]", "\t\t", 
     RowBox[{
      RowBox[{"\"\<Inputs\>\"", " ", "->", " ", "inputs"}], ",", 
      "\[IndentingNewLine]", "\t\t", 
      RowBox[{"\"\<Neurons\>\"", " ", "->", " ", "neurons"}], ",", 
      "\[IndentingNewLine]", "\t\t", 
      RowBox[{"\"\<Weights\>\"", " ", "->", " ", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<WeightDistribution\>\"", "]"}], ",",
          " ", 
         RowBox[{"{", 
          RowBox[{"neurons", ",", " ", "inputs"}], "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", "\t\t", 
      RowBox[{"\"\<Biases\>\"", " ", "->", " ", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<BiasDistribution\>\"", "]"}], ",", 
         " ", "neurons"}], "]"}]}], ",", "\n", "\t\t", 
      RowBox[{"\"\<ActivationFunction\>\"", " ", "->", " ", 
       RowBox[{"OptionValue", "[", "\"\<ActivationFunction\>\"", "]"}]}]}], 
     "\[IndentingNewLine]", "\t", "|>"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "linearLayer", "]"}], " ", "=", " ", 
     RowBox[{"{", "\n", "\t", 
      RowBox[{
       RowBox[{
       "\"\<ActivationFunction\>\"", " ", "->", " ", "LogisticSigmoid"}], ",",
        "\n", "\t", 
       RowBox[{"\"\<WeightDistribution\>\"", " ", "->", " ", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", " ", "1"}], "]"}]}], ",", "\n", "\t", 
       RowBox[{"\"\<BiasDistribution\>\"", " ", "->", " ", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", " ", ".1"}], "]"}]}]}], "\n", "}"}]}], 
    ";"}]}]}]], "Code",
 CellChangeTimes->{{3.900165558819038*^9, 3.90016557181672*^9}, {
   3.900507199837049*^9, 3.900507235401417*^9}, {3.9005078582081423`*^9, 
   3.900507866090992*^9}, {3.900508336361527*^9, 3.900508338690401*^9}, {
   3.901022226940144*^9, 3.90102224512673*^9}, {3.9011100043873167`*^9, 
   3.901110013422667*^9}, 3.9012785930870123`*^9, {3.9024908339851007`*^9, 
   3.9024908356495047`*^9}, {3.9024939211955547`*^9, 3.90249392301584*^9}, {
   3.902494217563992*^9, 3.90249421788262*^9}, {3.902495657056332*^9, 
   3.902495661453931*^9}, {3.903165035644363*^9, 3.903165057281646*^9}, {
   3.90316620777715*^9, 3.903166223879723*^9}, {3.90317227079084*^9, 
   3.903172379740481*^9}, {3.903172467091846*^9, 3.903172518108535*^9}, {
   3.903172656773942*^9, 3.903172666529422*^9}, {3.903173017521943*^9, 
   3.903173017641168*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"aa04fd5b-1529-45b5-bbc3-c5dedb8eb63c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "apply", " ", "weighted", " ", "summation", " ", "from", " ", "layer"}], 
   " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"applyLinearLayer", "[", 
    RowBox[{"layer_", ",", " ", "inputs_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{
    RowBox[{
     RowBox[{"layer", "[", "\"\<Weights\>\"", "]"}], " ", ".", " ", 
     "inputs"}], " ", "+", " ", 
    RowBox[{"layer", "[", "\"\<Biases\>\"", "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.9001658051989613`*^9, 3.900165846405797*^9}, {
  3.900165928877907*^9, 3.900165931094562*^9}, {3.900507221452429*^9, 
  3.900507221869989*^9}, {3.900507263939221*^9, 3.900507266659099*^9}, {
  3.900507304065806*^9, 3.900507329216206*^9}, {3.900507868453137*^9, 
  3.900507877144429*^9}, {3.901022265487055*^9, 3.901022268750958*^9}, {
  3.9031644664387503`*^9, 3.90316447438688*^9}, {3.9031658832761087`*^9, 
  3.9031659084138947`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"98de876e-a6bf-493a-b3a1-d5a132a89403"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "apply", " ", "activation", " ", "function", " ", "from", " ", "layer"}], 
   " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"applyActivation", "[", 
    RowBox[{"layer_", ",", " ", "inputs_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{
    RowBox[{"layer", "[", "\"\<ActivationFunction\>\"", "]"}], " ", "/@", " ",
     "inputs"}]}]}]], "Code",
 CellChangeTimes->{{3.900165485959984*^9, 3.900165493479166*^9}, {
  3.900165548571888*^9, 3.9001655492886467`*^9}, {3.900507216639189*^9, 
  3.900507218315398*^9}, {3.901022255363751*^9, 3.901022276703396*^9}, {
  3.903164477078908*^9, 3.903164477390665*^9}, {3.903165895966717*^9, 
  3.903165906666108*^9}, {3.9031726852518167`*^9, 3.9031726859674797`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"df87031d-db6b-4bc6-a67b-96b74e737cef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "feed", " ", "inputs", " ", "forward", " ", "through", " ", "each", " ", 
     "layer"}], ",", " ", 
    RowBox[{"sowing", " ", "summations", " ", "and", " ", "activations"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"applyForwardPass", "[", 
    RowBox[{"layers_", ",", " ", "inputs_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{"Fold", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"current", ",", " ", "layer"}], "}"}], ",", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"Sow", "[", 
         RowBox[{
          RowBox[{"applyLinearLayer", "[", 
           RowBox[{"layer", ",", " ", "current"}], "]"}], ",", " ", 
          "\"\<Summations\>\""}], "]"}], " ", "//", "\n", "\t\t\t", 
        RowBox[{
         RowBox[{"Sow", "[", 
          RowBox[{
           RowBox[{"applyActivation", "[", 
            RowBox[{"layer", ",", " ", "#"}], "]"}], ",", " ", 
           "\"\<Activations\>\""}], "]"}], " ", "&"}]}]}], "\n", "\t\t", 
      "]"}], ",", "\n", "\t\t", "inputs", ",", "\n", "\t\t", "layers"}], "\n",
     "\t", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.900165630117494*^9, 3.900165639390486*^9}, {
   3.900165761653887*^9, 3.900165768168208*^9}, {3.900165828705814*^9, 
   3.900165830038355*^9}, {3.900165863642522*^9, 3.900165877751355*^9}, {
   3.900507250563377*^9, 3.900507315948605*^9}, {3.900507353955459*^9, 
   3.9005074325958433`*^9}, {3.900507655040917*^9, 3.900507656991757*^9}, {
   3.900507880561081*^9, 3.900507903363222*^9}, {3.901022340162389*^9, 
   3.901022353853435*^9}, {3.901022794766786*^9, 3.901022800477303*^9}, 
   3.90316618971432*^9, {3.903168775360804*^9, 3.9031687767653627`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"ffda7cc2-d670-4f52-a36a-178124c40009"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "reap", " ", "intermediates", " ", "and", " ", "return", " ", 
     "association", " ", "with", " ", "outputs"}], ",", " ", "summations", 
    ",", " ", 
    RowBox[{"and", " ", "activations"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"reapForwardPass", "[", 
    RowBox[{"layers_", ",", " ", "inputs_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{
    RowBox[{
     RowBox[{"Reap", "[", "\n", "\t\t", 
      RowBox[{
       RowBox[{"\"\<Outputs\>\"", " ", "->", " ", 
        RowBox[{"applyForwardPass", "[", 
         RowBox[{"layers", ",", " ", "inputs"}], "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"{", 
        RowBox[{"\"\<Summations\>\"", ",", " ", "\"\<Activations\>\""}], 
        "}"}], ",", "\n", "\t\t", "Rule"}], "\n", "\t", "]"}], " ", "//", " ",
      "Flatten"}], " ", "//", " ", 
    RowBox[{"Apply", "[", "Association", "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.900507469937497*^9, 3.900507613554356*^9}, {
  3.900507659552443*^9, 3.900507662105192*^9}, {3.900507907599413*^9, 
  3.900507931878294*^9}, {3.903168784836252*^9, 3.903168785091758*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"ce3cf2e0-f924-4902-85f3-cb913ec0358e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Backpropagation", "Subsubsection",
 CellChangeTimes->{{3.9010246307879887`*^9, 3.901024631435306*^9}, {
  3.901800161644622*^9, 
  3.9018001629904737`*^9}},ExpressionUUID->"4453ef77-2ef7-4647-a1ca-\
56ec34df56c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "calculate", " ", "loss", " ", "for", " ", "single", " ", "training", " ", 
    "example", " ", "using", " ", "SSE"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"calculateLoss", "[", 
    RowBox[{
    "output_", ",", " ", "target_", ",", " ", "\"\<SumSquaredError\>\""}], 
    "]"}], " ", ":=", "\[IndentingNewLine]", "\t", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"output", " ", "-", " ", "target"}], ")"}], " ", "^", " ", 
     "2"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.901630524907728*^9, 3.901630546317006*^9}, {
  3.90163352184149*^9, 3.9016335482831583`*^9}, {3.901808177434681*^9, 
  3.901808187213448*^9}, {3.902495913558405*^9, 3.902495916162166*^9}, {
  3.9031644848911457`*^9, 3.903164498508013*^9}, {3.90316623774621*^9, 
  3.9031662380077057`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"c6ffa4c3-d8f5-496a-b9d3-bc3a37c5523c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "neuron", " ", "deltas", " ", "for", " ", "output", " ", "layer", " ", 
    RowBox[{"(", 
     RowBox[{"d", " ", "Error", " ", "d", " ", "Summation"}], ")"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{"calculateOutputDeltas", "[", 
    RowBox[{
    "output_", ",", " ", "target_", ",", " ", "summations_", ",", " ", 
     "activationFunction_", ",", " ", "\"\<SumSquaredError\>\""}], "]"}], " ",
    ":=", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"output", " ", "-", " ", "target"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"activationFunction", "'"}], " ", "/@", " ", "summations"}], 
     ")"}]}]}]}]], "Code",
 CellChangeTimes->{{3.901630314468309*^9, 3.9016304884698277`*^9}, {
   3.901630520085877*^9, 3.901630532324779*^9}, {3.901633386574761*^9, 
   3.9016333914102173`*^9}, {3.9017147967291117`*^9, 3.901714808596643*^9}, {
   3.9017148416083403`*^9, 3.901714843689253*^9}, {3.902491032121838*^9, 
   3.902491050467914*^9}, {3.902491462944788*^9, 3.902491463944398*^9}, {
   3.902495910046281*^9, 3.902495911983239*^9}, {3.903164501067713*^9, 
   3.903164517012155*^9}, 3.903164665693939*^9, {3.903166245315802*^9, 
   3.903166249530464*^9}, {3.903172622306448*^9, 3.903172622415112*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"89769d09-775d-4eca-a696-20f110bf56f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "backpropagate", " ", "deltas", " ", "through", " ", "one", " ", "layer", 
    " ", "with", " ", "chain", " ", "rule"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "takes", " ", "deltas", " ", "and", " ", "weights", " ", "from", " ", 
     "next", " ", "layer"}], ",", " ", 
    RowBox[{
    "activation", " ", "and", " ", "summations", " ", "from", " ", "current", 
     " ", "layer"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"calculateNextDeltas", "[", 
    RowBox[{
    "nextDeltas_", ",", " ", "weights_", ",", " ", "activationFunction_", ",",
      " ", "summations_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"nextDeltas", " ", ".", " ", "weights"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"activationFunction", "'"}], " ", "/@", " ", "summations"}], 
     ")"}]}]}]}]], "Code",
 CellChangeTimes->{{3.900513274187667*^9, 3.900513469777364*^9}, {
  3.901022579228139*^9, 3.9010225937222633`*^9}, {3.901634197451151*^9, 
  3.901634198467231*^9}, {3.9024946424815397`*^9, 3.902494665586508*^9}, {
  3.903115724850971*^9, 3.903115746475389*^9}, {3.903164532762854*^9, 
  3.9031645354813967`*^9}, {3.9031645996775103`*^9, 3.903164648032353*^9}, {
  3.903164681105582*^9, 3.903164694667287*^9}, {3.90316897674087*^9, 
  3.9031689877806664`*^9}, {3.9031726260657053`*^9, 3.903172629356421*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"c978071f-e7a0-4984-9d5d-ac0a34bee3ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "backpropagate", " ", "output", " ", "deltas", " ", "through", " ", "all", 
    " ", "layers"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"backpropagateDeltas", "[", 
    RowBox[{"outputDeltas_", ",", " ", "layers_", ",", " ", "fp_"}], "]"}], 
   " ", ":=", "\n", "\n", "\t", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "take", " ", "activations", " ", "and", " ", "summations", " ", "from", 
      " ", "all", " ", "but", " ", "last", " ", "layer"}], ",", " ", 
     RowBox[{
     "weights", " ", "from", " ", "all", " ", "but", " ", "first", " ", 
      "layer"}]}], " ", "*)"}], "\n", "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"weights", " ", "=", " ", 
        RowBox[{"Rest", "[", 
         RowBox[{"Lookup", "[", 
          RowBox[{"layers", ",", " ", "\"\<Weights\>\""}], "]"}], "]"}]}], 
       ",", "\n", "\t\t\t", 
       RowBox[{"activationFunctions", " ", "=", " ", 
        RowBox[{"Most", "[", 
         RowBox[{"Lookup", "[", 
          RowBox[{"layers", ",", " ", "\"\<ActivationFunction\>\""}], "]"}], 
         "]"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"summations", " ", "=", " ", 
        RowBox[{"Most", "[", 
         RowBox[{"fp", "[", "\"\<Summations\>\"", "]"}], "]"}]}]}], "\n", 
      "\t\t", "}"}], ",", "\n", "\n", "\t\t", 
     RowBox[{
      RowBox[{"FoldList", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"calculateNextDeltas", "[", 
          RowBox[{"#1", ",", " ", 
           RowBox[{"Sequence", " ", "@@", " ", "#2"}]}], "]"}], " ", "&"}], 
        ",", "\n", "\t\t\t", "outputDeltas", ",", "\n", "\t\t\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "is", " ", "there", " ", "a", " ", "built", " ", "in", " ", 
          "function", " ", "for", " ", 
          RowBox[{
           RowBox[{"MapThread", "[", 
            RowBox[{"List", ",", " ", "..."}], "]"}], "?", " ", "Riffle"}], 
          " ", "can", " ", "only", " ", "take", " ", "2", " ", "lists"}], " ",
          "*)"}], "\n", "\t\t\t", 
        RowBox[{
         RowBox[{"MapThread", "[", 
          RowBox[{"List", ",", " ", 
           RowBox[{"{", 
            RowBox[{
            "weights", ",", " ", "activationFunctions", ",", " ", 
             "summations"}], "}"}]}], "]"}], " ", "//", " ", "Reverse"}]}], 
       "\n", "\t\t", "]"}], " ", "//", " ", "Reverse"}]}], "\n", "\t", 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.900603109094293*^9, 3.900603163497349*^9}, {
   3.9006032440354843`*^9, 3.900603419565837*^9}, {3.900603488475383*^9, 
   3.9006035249974318`*^9}, {3.901016285681773*^9, 3.901016286780085*^9}, {
   3.901022542297449*^9, 3.901022542639195*^9}, {3.901022581224289*^9, 
   3.9010225834412813`*^9}, {3.9010226309193773`*^9, 3.901022632832753*^9}, {
   3.901023860035762*^9, 3.901023886395125*^9}, {3.901024444557428*^9, 
   3.9010244471940107`*^9}, {3.901633638796508*^9, 3.90163364502101*^9}, {
   3.901634195420992*^9, 3.901634195855075*^9}, {3.902494658917717*^9, 
   3.902494660378654*^9}, 3.90249482154984*^9, 3.9024952770061293`*^9, {
   3.902495749939912*^9, 3.902495752564269*^9}, {3.903115762917081*^9, 
   3.903115875641626*^9}, {3.903115924608201*^9, 3.903116061914946*^9}, {
   3.9031162167486153`*^9, 3.903116218811425*^9}, {3.903116268407145*^9, 
   3.903116283918254*^9}, {3.903116348782777*^9, 3.9031163538776417`*^9}, {
   3.903164636418713*^9, 3.9031646396754436`*^9}, {3.903164673460485*^9, 
   3.903164676931986*^9}, {3.9031659177299547`*^9, 3.903166079968912*^9}, 
   3.9031661984893*^9, {3.903168803582531*^9, 3.903168821025776*^9}, {
   3.903168938126141*^9, 3.9031689682367983`*^9}, {3.90317263639076*^9, 
   3.903172640824655*^9}, {3.9031727017414837`*^9, 3.9031727025550537`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"4577cb3b-c01f-4395-9b98-5c9aa7ca6346"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "calculate", " ", "error", " ", "gradients", " ", "wrt", " ", "weights", 
    " ", "from", " ", "gradients", " ", "wrt", " ", "summations"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{"calculateWeightGradients", "[", 
    RowBox[{"allDeltas_", ",", " ", "inputs_", ",", " ", "allActivations_"}], 
    "]"}], " ", ":=", "\n", "\t", 
   RowBox[{"MapThread", "[", "\[IndentingNewLine]", "\t\t", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"deltas", ",", " ", "activations"}], "}"}], ",", 
       "\[IndentingNewLine]", "\t\t\t", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", "deltas", "}"}], "]"}], " ", ".", " ", 
        RowBox[{"{", "activations", "}"}]}]}], "\[IndentingNewLine]", "\t\t", 
      "]"}], ",", "\[IndentingNewLine]", "\t\t", 
     RowBox[{"{", 
      RowBox[{"allDeltas", ",", " ", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Most", " ", "@", " ", "allActivations"}], ",", " ", 
         "inputs"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "\t", 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.900683578897831*^9, 3.900683600900608*^9}, {
  3.900683651894773*^9, 3.900683704864881*^9}, {3.90068376612435*^9, 
  3.900683766731481*^9}, {3.901024457508309*^9, 3.901024500988913*^9}, {
  3.9017150704340773`*^9, 3.9017150731623096`*^9}, {3.901715293272192*^9, 
  3.901715295651433*^9}, {3.903093800696587*^9, 3.903093800935855*^9}, {
  3.90311522604278*^9, 3.903115226450479*^9}, {3.903168298793985*^9, 
  3.9031683017000504`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"6269aca1-c6c8-41b8-aa7d-7582da787ed3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "calculate", " ", "all", " ", "neuron", " ", "deltas", " ", "and", " ", 
    "weight", " ", "gradients", " ", "by", " ", "backpropagating", " ", 
    "errors"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"backwardPass", "[", 
    RowBox[{"layers_", ",", " ", "labelledInput_Rule", ",", " ", 
     RowBox[{"lossFunction_", " ", ":", " ", "\"\<SumSquaredError\>\""}]}], 
    "]"}], " ", ":=", "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "forwardPass", ",", " ", "outputDeltas", ",", " ", "allDeltas", ",", 
       " ", "weightGradients"}], "}"}], ",", "\n", "\t", "\n", "\t\t", 
     RowBox[{
      RowBox[{"forwardPass", " ", "=", " ", 
       RowBox[{"reapForwardPass", "[", 
        RowBox[{"layers", ",", " ", 
         RowBox[{"First", " ", "@", " ", "labelledInput"}]}], "]"}]}], ";", 
      "\n", "\t\t", "\n", "\t\t", 
      RowBox[{"outputDeltas", " ", "=", " ", 
       RowBox[{"calculateOutputDeltas", "[", "\n", "\t\t\t", 
        RowBox[{
         RowBox[{"forwardPass", "[", "\"\<Outputs\>\"", "]"}], ",", "\n", 
         "\t\t\t", 
         RowBox[{"Last", "[", "labelledInput", "]"}], ",", "\n", "\t\t\t", 
         RowBox[{"Last", "[", 
          RowBox[{"forwardPass", "[", "\"\<Summations\>\"", "]"}], "]"}], ",",
          "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"Last", "[", "layers", "]"}], "[", 
          "\"\<ActivationFunction\>\"", "]"}], ",", "\n", "\t\t\t", 
         "lossFunction"}], "\n", "\t\t", "]"}]}], ";", "\n", "\t\t", "\n", 
      "\t\t", 
      RowBox[{"allDeltas", " ", "=", " ", 
       RowBox[{"backpropagateDeltas", "[", 
        RowBox[{"outputDeltas", ",", " ", "layers", ",", " ", "forwardPass"}],
         "]"}]}], ";", "\n", "\t\t", "\n", "\t\t", 
      RowBox[{"weightGradients", " ", "=", " ", 
       RowBox[{"calculateWeightGradients", "[", "\n", "\t\t\t", 
        RowBox[{"allDeltas", ",", "\n", "\t\t\t", 
         RowBox[{"First", " ", "@", " ", "labelledInput"}], ",", "\n", 
         "\t\t\t", 
         RowBox[{"forwardPass", "[", "\"\<Activations\>\"", "]"}]}], "\n", 
        "\t\t", "]"}]}], ";", "\n", "\t\t", "\n", "\t\t", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<AllDeltas\>\"", " ", "->", " ", "allDeltas"}], ",", " ", 
        
        RowBox[{
        "\"\<WeightGradients\>\"", " ", "->", " ", "weightGradients"}]}], 
       "|>"}]}]}], "\n", "\t", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.900603002712975*^9, 3.9006031353216047`*^9}, {
   3.9006031920869503`*^9, 3.90060319414911*^9}, {3.900603536803502*^9, 
   3.900603539077364*^9}, {3.900603861458612*^9, 3.900603954871955*^9}, {
   3.900679070071116*^9, 3.900679075117937*^9}, {3.900679252987653*^9, 
   3.900679254193552*^9}, {3.9006794183390903`*^9, 3.900679431681649*^9}, {
   3.90067972445361*^9, 3.9006797264765997`*^9}, {3.900680336206019*^9, 
   3.900680365409309*^9}, {3.900681004503878*^9, 3.900681007033812*^9}, {
   3.9006810832099524`*^9, 3.900681084787387*^9}, {3.9006818885415897`*^9, 
   3.900681890533628*^9}, {3.9006838203710938`*^9, 3.900683933603942*^9}, {
   3.901016988597704*^9, 3.901017008641122*^9}, {3.901017082987296*^9, 
   3.90101714910404*^9}, {3.901022435652149*^9, 3.9010224493821077`*^9}, {
   3.901022517938695*^9, 3.901022537450086*^9}, {3.9010233265755873`*^9, 
   3.9010233718543043`*^9}, {3.901023628161152*^9, 3.901023729218135*^9}, {
   3.9010239735517282`*^9, 3.9010239918664417`*^9}, {3.9010243394036217`*^9, 
   3.901024419421636*^9}, {3.901109424900104*^9, 3.901109432657909*^9}, {
   3.9011096203235903`*^9, 3.901109631183823*^9}, 3.901197925373547*^9, 
   3.901286683886101*^9, {3.901290491926249*^9, 3.9012904922836447`*^9}, {
   3.90163340476285*^9, 3.90163351084157*^9}, 3.9016335699140177`*^9, {
   3.901633653455207*^9, 3.901633653971277*^9}, {3.901633732971491*^9, 
   3.9016337373499193`*^9}, {3.901634349624419*^9, 3.901634361055748*^9}, {
   3.901634567783557*^9, 3.901634572579876*^9}, {3.901634709508745*^9, 
   3.90163473147639*^9}, {3.9016347630880003`*^9, 3.9016347655467663`*^9}, {
   3.9016350430153923`*^9, 3.9016350513871183`*^9}, {3.9017148874374933`*^9, 
   3.901714890412567*^9}, {3.901715075531643*^9, 3.9017150877927647`*^9}, {
   3.9017152767281513`*^9, 3.901715324911949*^9}, {3.90171637601492*^9, 
   3.901716377744401*^9}, 3.901716789031891*^9, {3.9018029975828447`*^9, 
   3.9018029983686934`*^9}, {3.902492101503813*^9, 3.902492103467415*^9}, {
   3.9024925073248672`*^9, 3.9024925685190983`*^9}, {3.9024929187289257`*^9, 
   3.9024929443456593`*^9}, {3.9024946978919783`*^9, 
   3.9024946997368793`*^9}, {3.903116459632155*^9, 3.903116472889105*^9}, {
   3.903166409928857*^9, 3.90316643484249*^9}, {3.903167882474008*^9, 
   3.9031679352146683`*^9}, {3.903168129338724*^9, 3.9031682002050037`*^9}, {
   3.903168265719239*^9, 3.903168274084955*^9}, {3.903172719593397*^9, 
   3.9031727903413763`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"3d3648c8-da14-4990-9872-6260359c2f8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training", "Subsubsection",
 CellChangeTimes->{{3.901800171954215*^9, 
  3.901800172583991*^9}},ExpressionUUID->"9ae4a78d-7d02-4250-924e-\
2b4968ff5cc5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "accumulate", " ", "gradients", " ", "over", " ", "multiple", " ", 
    "pieces", " ", "of", " ", "data", " ", "for", " ", "batch", " ", 
    "training"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"accumulateGradients", "[", 
    RowBox[{"layers_", ",", " ", "data_", ",", " ", "lossFunction_"}], "]"}], 
   " ", ":=", "\[IndentingNewLine]", "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gradients", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"backwardPass", "[", 
           RowBox[{"layers", ",", " ", "#", ",", " ", "lossFunction"}], "]"}],
           " ", "&"}], ",", " ", "data"}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\t\t", 
     RowBox[{"<|", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"\"\<WeightGradients\>\"", " ", "->", " ", 
        RowBox[{"Total", "[", 
         RowBox[{"Lookup", "[", 
          RowBox[{"gradients", ",", " ", "\"\<WeightGradients\>\""}], "]"}], 
         "]"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"\"\<AllDeltas\>\"", " ", "->", " ", 
        RowBox[{"Total", "[", 
         RowBox[{"Lookup", "[", 
          RowBox[{"gradients", ",", " ", "\"\<AllDeltas\>\""}], "]"}], 
         "]"}]}]}], "\n", "\t\t", "|>"}]}], "\n", "\t", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.9018029570628023`*^9, 3.901802968910029*^9}, {
   3.901803019869458*^9, 3.901803045487597*^9}, {3.901803083372738*^9, 
   3.9018030893433037`*^9}, {3.9018031248731947`*^9, 
   3.9018031439599953`*^9}, {3.90180321689712*^9, 3.901803263510257*^9}, {
   3.9018042831848803`*^9, 3.9018042954398003`*^9}, {3.903164711259547*^9, 
   3.903164727517149*^9}, 3.903168872615795*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"ebd0cc6d-a947-4085-b2e7-6757282650d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "update", " ", "weights", " ", "to", " ", "reduce", " ", "overall", " ", 
    "loss", " ", "according", " ", "to", " ", "weight", " ", "gradients", " ",
     "and", " ", "learning", " ", "rate"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"note", ":", " ", 
    RowBox[{
    "currently", " ", "uses", " ", "10", "%", " ", "of", " ", "learning", " ",
      "rate", " ", "for", " ", "bias", " ", "updates"}]}], " ", "*)"}], "\n", 
  
  RowBox[{
   RowBox[{"gradientDescentStep", "[", 
    RowBox[{"layers_", ",", " ", "gradients_", ",", " ", "learningRate_"}], 
    "]"}], " ", ":=", "\n", "\t", 
   RowBox[{"MapThread", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"layer", ",", " ", "weightGradients", ",", " ", "allDeltas"}],
         "}"}], ",", "\n", "\t\t\t", 
       RowBox[{"Append", "[", 
        RowBox[{"layer", ",", " ", 
         RowBox[{"{", "\n", "\t\t\t\t", 
          RowBox[{
           RowBox[{"\"\<Weights\>\"", " ", "->", " ", 
            RowBox[{
             RowBox[{"layer", "[", "\"\<Weights\>\"", "]"}], " ", "-", " ", 
             RowBox[{"weightGradients", " ", "*", " ", "learningRate"}]}]}], 
           ",", "\n", "\t\t\t\t", 
           RowBox[{"\"\<Biases\>\"", " ", "->", " ", 
            RowBox[{
             RowBox[{"layer", "[", "\"\<Biases\>\"", "]"}], " ", "-", " ", 
             RowBox[{
             "allDeltas", " ", "*", " ", "learningRate", " ", "*", " ", 
              ".1"}]}]}]}], "\n", "\t\t\t", "}"}]}], "]"}]}], "\n", "\t\t", 
      "]"}], ",", "\n", "\t\t", 
     RowBox[{"{", 
      RowBox[{"layers", ",", " ", 
       RowBox[{"gradients", "[", "\"\<WeightGradients\>\"", "]"}], ",", " ", 
       RowBox[{"gradients", "[", "\"\<AllDeltas\>\"", "]"}]}], "}"}]}], "\n", 
    "\t", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.900511912821782*^9, 3.9005119277274942`*^9}, {
  3.9005120744633512`*^9, 3.900512114151217*^9}, {3.900512159443112*^9, 
  3.900512178917329*^9}, {3.9005122129540987`*^9, 3.900512229616536*^9}, {
  3.9005124295229692`*^9, 3.9005124753163*^9}, {3.900512577362719*^9, 
  3.9005126674032087`*^9}, {3.900690081863041*^9, 3.9006900825742197`*^9}, {
  3.901023351593383*^9, 3.901023361245179*^9}, {3.9010245101732807`*^9, 
  3.901024537054229*^9}, {3.9011094916945*^9, 3.901109589463689*^9}, {
  3.901109702052659*^9, 3.901109726040989*^9}, {3.901803367029604*^9, 
  3.901803408183029*^9}, {3.901807700310163*^9, 3.901807729707556*^9}, {
  3.90180800010515*^9, 3.901808009705418*^9}, {3.903116635706853*^9, 
  3.903116637273943*^9}, {3.903164733967403*^9, 3.903164765255652*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"55ffb453-17d3-4ee3-8002-929f5b7a7b22"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"split", " ", "data", " ", "into", " ", "batches"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{"batchData", "[", 
    RowBox[{"data_", ",", " ", "batchSize_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"RandomSample", "[", "data", "]"}], ",", " ", 
     RowBox[{"UpTo", "[", "batchSize", "]"}]}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.901803647683426*^9, 3.901803688354351*^9}, {
  3.901803946756959*^9, 3.9018039667405443`*^9}, {3.901806586335393*^9, 
  3.901806595329319*^9}, {3.903164771738138*^9, 3.903164776250025*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"21d00233-0056-4aae-8a25-bae8fad87dc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "update", " ", "network", " ", "based", " ", "on", " ", "one", " ", "full",
     " ", "pass", " ", "through", " ", "batched", " ", "data"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{"trainEpoch", "[", 
    RowBox[{"layers_List", ",", " ", "trainingData_List", ",", " ", 
     RowBox[{"OptionsPattern", "[", "trainNetwork", "]"}]}], "]"}], " ", ":=",
    "\n", "\t", 
   RowBox[{"Fold", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"currentLayers", ",", " ", "currentBatch"}], "}"}], ",", "\n",
        "\t\t\t", 
       RowBox[{"gradientDescentStep", "[", "\n", "\t\t\t\t", 
        RowBox[{"currentLayers", ",", "\n", "\t\t\t\t", 
         RowBox[{"accumulateGradients", "[", 
          RowBox[{"currentLayers", ",", " ", "currentBatch", ",", " ", 
           RowBox[{"OptionValue", "[", "\"\<LossFunction\>\"", "]"}]}], "]"}],
          ",", "\n", "\t\t\t\t", 
         RowBox[{"OptionValue", "[", "\"\<LearningRate\>\"", "]"}]}], "\n", 
        "\t\t\t", "]"}]}], "\n", "\t\t", "]"}], ",", "\n", "\t\t", "layers", 
     ",", "\n", "\t\t", 
     RowBox[{"batchData", "[", 
      RowBox[{"trainingData", ",", " ", 
       RowBox[{"OptionValue", "[", "\"\<BatchSize\>\"", "]"}]}], "]"}]}], 
    "\n", "\t", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.9017998811919527`*^9, 3.9017998823245993`*^9}, {
   3.901800060204404*^9, 3.901800066340807*^9}, {3.901800105808702*^9, 
   3.901800106197691*^9}, {3.901800256415745*^9, 3.9018002699733686`*^9}, {
   3.901801415205435*^9, 3.901801463767913*^9}, {3.901802341326042*^9, 
   3.901802523560871*^9}, {3.901802558579474*^9, 3.901802568992914*^9}, {
   3.901802676821824*^9, 3.901802693324708*^9}, {3.901803004306834*^9, 
   3.9018030046132927`*^9}, {3.901803417294675*^9, 3.901803515821364*^9}, {
   3.901803588619659*^9, 3.901803597707511*^9}, {3.9018039753222647`*^9, 
   3.9018039808559933`*^9}, {3.9018041214391193`*^9, 
   3.9018041219136257`*^9}, {3.901804277027039*^9, 3.90180427969048*^9}, {
   3.901806582375071*^9, 3.90180660700559*^9}, {3.901806722544519*^9, 
   3.901806723606635*^9}, 3.901806768872971*^9, {3.9018070881672783`*^9, 
   3.901807095641223*^9}, {3.902320877800837*^9, 3.9023208873177137`*^9}, {
   3.9031647794904833`*^9, 3.903164798315606*^9}, {3.903172880504459*^9, 
   3.903172928924428*^9}, {3.9031732293286667`*^9, 3.903173230395123*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"e345657e-15d6-4d2d-b835-d1f1fe20f2cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "apply", " ", "network", " ", "to", " ", "make", " ", "labelled", " ", 
    "predictions", " ", "for", " ", "each", " ", "input"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"makePredictions", "[", 
    RowBox[{"layers_", ",", " ", "inputs_"}], "]"}], " ", ":=", "\n", "\t", 
   RowBox[{"AssociationMap", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{
      RowBox[{"applyForwardPass", "[", 
       RowBox[{"layers", ",", " ", "#"}], "]"}], " ", "&"}], ",", "\n", 
     "\t\t", "inputs"}], "\n", "\t", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.901808338422319*^9, 3.9018083606827707`*^9}, {
   3.9018084234844913`*^9, 3.9018084844300833`*^9}, {3.902318616734191*^9, 
   3.902318639496204*^9}, {3.902318926016821*^9, 3.902318930414456*^9}, {
   3.903164803092215*^9, 3.9031648151169167`*^9}, 3.903166171813567*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"686ab6de-c707-4159-adf2-cea8d319cb8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "calculate", " ", "total", " ", "loss", " ", "over", " ", "all", " ", 
    "labelled", " ", "inputs"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"calculateTotalLoss", "[", 
    RowBox[{"layers_", ",", " ", "labelledInputs_", ",", " ", 
     RowBox[{"lossFunction_", " ", ":", " ", "\"\<SumSquaredError\>\""}]}], 
    "]"}], " ", ":=", "\n", "\t", 
   RowBox[{
    RowBox[{"Map", "[", "\n", "\t\t", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"labelledInput", ",", "\n", "\t\t\t", 
        RowBox[{"calculateLoss", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{"applyForwardPass", "[", 
           RowBox[{"layers", ",", " ", 
            RowBox[{"First", " ", "@", " ", "labelledInput"}]}], "]"}], ",", 
          "\n", "\t\t\t\t", 
          RowBox[{"Last", " ", "@", " ", "labelledInput"}], ",", "\n", 
          "\t\t\t\t", "lossFunction"}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t",
        "]"}], ",", "\n", "\t\t", "labelledInputs"}], "\n", "\t", "]"}], " ", 
    "//", " ", "Total"}]}]}]], "Code",
 CellChangeTimes->{{3.901808168127442*^9, 3.9018082797681017`*^9}, 
   3.902318668182548*^9, {3.902318717493987*^9, 3.902318769718895*^9}, {
   3.90231884317493*^9, 3.902318868934816*^9}, {3.902319109072929*^9, 
   3.90231911429668*^9}, {3.9023204182773848`*^9, 3.90232062524131*^9}, {
   3.902320766670869*^9, 3.90232086185649*^9}, {3.902320902295478*^9, 
   3.9023209361342173`*^9}, {3.9031648172088633`*^9, 3.903164825516863*^9}, {
   3.903167449781254*^9, 3.903167490553039*^9}, {3.90316753257275*^9, 
   3.903167532822336*^9}, {3.903439583352681*^9, 3.903439585963812*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"f7f3a6ff-ea12-46b9-b4b5-5b0e9387a27e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"train", " ", "network"}], ",", " ", 
    RowBox[{"returning", " ", "final", " ", "result", " ", "only"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"trainNetwork", "[", 
     RowBox[{"initialLayers_List", ",", " ", "trainingData_List", ",", " ", 
      RowBox[{"validationData_List", " ", ":", " ", "None"}], ",", " ", 
      RowBox[{"opts", " ", ":", " ", 
       RowBox[{"OptionsPattern", "[", "trainNetwork", "]"}]}]}], "]"}], " ", ":=",
     "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"Nest", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"Sow", "[", 
          RowBox[{"trainEpoch", "[", 
           RowBox[{"#", ",", " ", "trainingData", ",", " ", "opts"}], "]"}], 
          "]"}], " ", "&"}], ",", " ", "\n", "\t\t", "initialLayers", ",", 
        "\n", "\t\t", 
        RowBox[{"OptionValue", "[", "\"\<Epochs\>\"", "]"}]}], "\n", "\t", 
       "]"}], " ", "//", " ", "Reap"}], " ", "//", " ", 
     RowBox[{
      RowBox[{"trainingProgress", "[", 
       RowBox[{"#", ",", " ", "trainingData", ",", " ", "opts"}], "]"}], " ", 
      "&"}]}]}], "\n", "\t", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "trainNetwork", "]"}], " ", "=", " ", 
     RowBox[{"{", "\n", "\t", 
      RowBox[{
       RowBox[{"\"\<LearningRate\>\"", " ", "->", " ", ".1"}], ",", "\n", 
       "\t", 
       RowBox[{
       "\"\<LossFunction\>\"", " ", "->", " ", "\"\<SumSquaredError\>\""}], 
       ",", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "change", " ", "this", " ", "option", " ", "for", " ", "pretty", " ", 
         "red", " ", "outputs"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"\"\<BatchSize\>\"", " ", "->", " ", "1"}], ",", "\n", "\t", 
       RowBox[{"\"\<Epochs\>\"", " ", "->", " ", "1"}], ",", "\n", "\t", 
       RowBox[{"\"\<ShowProgress\>\"", " ", "->", " ", "True"}]}], "\n", 
      "}"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{{3.901806615723435*^9, 3.901806665380992*^9}, {
   3.901806725143881*^9, 3.901806793795467*^9}, {3.90231852496126*^9, 
   3.902318526742195*^9}, {3.9023188892326727`*^9, 3.902318905232362*^9}, {
   3.902405936795697*^9, 3.902405941137631*^9}, {3.902487548349173*^9, 
   3.902487563769326*^9}, {3.902487962089617*^9, 3.9024879642197866`*^9}, {
   3.9024880592168713`*^9, 3.902488059745702*^9}, {3.903165090346429*^9, 
   3.903165210805522*^9}, {3.903165833443636*^9, 3.903165837909246*^9}, 
   3.9031661653655376`*^9, {3.903166442612381*^9, 3.903166456340028*^9}, {
   3.903167392025838*^9, 3.9031673956680593`*^9}, {3.903168465116663*^9, 
   3.903168484193619*^9}, {3.903168531004583*^9, 3.903168536123163*^9}, {
   3.903168592231112*^9, 3.903168592727807*^9}, {3.903172850443058*^9, 
   3.903172865961381*^9}, {3.9031732209680767`*^9, 3.903173222293167*^9}, {
   3.9034376873306437`*^9, 3.9034377261381083`*^9}, {3.903437890051901*^9, 
   3.903437896694585*^9}, {3.903438528774946*^9, 3.9034385301296873`*^9}, {
   3.903438836830419*^9, 3.903438854530881*^9}, {3.903439501606832*^9, 
   3.9034395024152403`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"5e2f8e5b-1e6f-4b8c-9ddd-67f584f73e53"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "graph", " ", "training", " ", "loss", " ", "across", " ", "epochs"}], " ",
    "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"trainingProgress", "[", 
     RowBox[{"training_", ",", " ", "trainingData_", ",", " ", 
      RowBox[{"validationData_List", " ", ":", " ", "None"}], ",", " ", 
      RowBox[{"opts", " ", ":", " ", 
       RowBox[{"OptionsPattern", "[", "trainNetwork", "]"}]}]}], "]"}], " ", ":=",
     "\n", "\t", 
    RowBox[{"(*", " ", 
     RowBox[{
     "reap", " ", "intermediate", " ", "networks", " ", "from", " ", 
      "training", " ", "to", " ", "track", " ", "progress"}], " ", "*)"}], 
    "\n", "\t", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "networks", ",", " ", "trainingLoss", ",", " ", "validationLoss"}], 
       "}"}], ",", "\n", "\t\t", 
      RowBox[{
       RowBox[{"networks", " ", "=", " ", 
        RowBox[{
         RowBox[{"training", " ", "//", " ", "Rest"}], " ", "//", " ", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"#", ",", " ", "2"}], "]"}], " ", "&"}]}]}], ";", "\n", 
       "\t\t", 
       RowBox[{"trainingLoss", " ", "=", " ", 
        RowBox[{"lossProgress", "[", 
         RowBox[{"networks", ",", " ", "trainingData", ",", " ", 
          RowBox[{"OptionValue", "[", "\"\<LossFunction\>\"", "]"}]}], 
         "]"}]}], ";", "\n", "\t\t", 
       RowBox[{"validationLoss", " ", "=", " ", 
        RowBox[{"lossProgress", "[", 
         RowBox[{"networks", ",", " ", "validationData", ",", " ", 
          RowBox[{"OptionValue", "[", "\"\<LossFunction\>\"", "]"}]}], 
         "]"}]}], ";", "\n", "\t\t", "\n", "\t\t", 
       RowBox[{
        RowBox[{"ListLinePlot", "[", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trainingLoss", ",", " ", "validationLoss"}], "}"}], ",", 
          "\n", "\t\t\t", 
          RowBox[{"PlotLabels", " ", "->", " ", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Training Loss\>\"", ",", " ", "\"\<ValidationLoss\>\""}], 
            "}"}]}], ",", "\n", "\t\t\t", 
          RowBox[{"Frame", " ", "->", " ", "True"}], ",", "\n", "\t\t\t", 
          RowBox[{"FrameLabel", " ", "->", " ", 
           RowBox[{"{", 
            RowBox[{"\"\<Epochs\>\"", ",", " ", "\"\<Loss\>\""}], "}"}]}]}], 
         "\n", "\t\t", "]"}], " ", "//", " ", "CellPrint"}], ";", "\n", 
       "\t\t", "\n", "\t\t", 
       RowBox[{"Last", " ", "@", " ", "networks"}]}]}], "\n", "\t", "]"}]}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "do", " ", "nothing", " ", "if", " ", "\"\<ShowProgress\>\"", " ", 
     "option", " ", "is", " ", "False"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"trainingProgress", "[", "___", "]"}], " ", ":=", " ", 
     "Identity"}], " ", "*)"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "helpers", " ", "to", " ", "handle", " ", "missing", " ", "validation", 
     " ", "data"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"lossProgress", "[", 
     RowBox[{"networks_", ",", " ", "data_", ",", " ", "lossFunction_"}], 
     "]"}], " ", ":=", " ", "\n", "\t", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"calculateTotalLoss", "[", 
        RowBox[{"#", ",", " ", "data", ",", " ", "lossFunction"}], "]"}], " ",
        "&"}], ",", " ", "networks"}], "]"}]}], "\n", "\t", "\n", 
   RowBox[{
    RowBox[{"lossProgress", "[", 
     RowBox[{"_", ",", " ", "None", ",", " ", "_"}], "]"}], " ", ":=", " ", 
    "Nothing"}]}]}]], "Code",
 CellChangeTimes->{{3.903437902251782*^9, 3.9034379458680887`*^9}, {
   3.903438586349777*^9, 3.9034387357808228`*^9}, {3.9034387717196903`*^9, 
   3.9034388440303793`*^9}, {3.903438880101191*^9, 3.903438883755629*^9}, {
   3.903439017617518*^9, 3.903439021335231*^9}, {3.9034390948151293`*^9, 
   3.903439115444316*^9}, {3.903439162753734*^9, 3.903439184828189*^9}, {
   3.903439233983397*^9, 3.9034392390565023`*^9}, 3.9034393602659397`*^9, {
   3.903439407329175*^9, 3.903439456219051*^9}, {3.9034395105652103`*^9, 
   3.9034395326751223`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"c8dfffcf-656d-433f-87a4-eedb6af65f05"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: Learning XOR", "Section",
 CellChangeTimes->{{3.903166580634541*^9, 3.903166584703045*^9}, {
  3.9031720427816677`*^9, 
  3.903172058461977*^9}},ExpressionUUID->"de2a3a50-09a3-411f-bc59-\
c4de8f971870"],

Cell[CellGroupData[{

Cell["Setup learning parameters", "Subsubsection",
 CellChangeTimes->{{3.90317202223011*^9, 
  3.90317203366313*^9}},ExpressionUUID->"f6bd0a29-df71-42f6-9d85-\
4fddeb38c82a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"learningRate", " ", "=", " ", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lossFunction", " ", "=", " ", "\"\<SumSquaredError\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"batchSize", " ", "=", " ", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"epochs", " ", "=", "10000"}], ";"}]}], "Input",
 CellChangeTimes->{{3.901017329158189*^9, 3.901017332531003*^9}, {
   3.9018068440837317`*^9, 3.901806859107897*^9}, 3.902318486664823*^9, {
   3.902490854712974*^9, 3.90249089174892*^9}, {3.902493091192256*^9, 
   3.9024931103491287`*^9}, 3.902493383524057*^9, 3.902493954344953*^9, 
   3.9024940466428967`*^9, {3.902496636802487*^9, 3.9024966510016413`*^9}, 
   3.9031166005963984`*^9, 3.903116742589589*^9, 3.9031168358766747`*^9, {
   3.903116925681357*^9, 3.903116950801052*^9}, {3.90316659665796*^9, 
   3.903166598257634*^9}, {3.9034394431658773`*^9, 3.903439443264462*^9}, {
   3.903439550851685*^9, 3.9034395509938707`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"015174ad-d5c8-4067-b046-6d50c3b4fdff"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Build training dataset", "Subsubsection",
 CellChangeTimes->{{3.903172036505506*^9, 3.903172038897298*^9}, 
   3.9034390377901278`*^9},ExpressionUUID->"fbde7219-7543-4864-a528-\
b68ba5a14a69"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputs", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"targets", " ", "=", " ", 
   RowBox[{"List", " ", "/@", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}]}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.9031693228322372`*^9, 3.90316935386261*^9}, {
  3.9031693883955584`*^9, 3.903169389176524*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"0111ca61-7b58-4638-92f3-52cdd1d5d194"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Rule", ",", " ", 
     RowBox[{"{", 
      RowBox[{"inputs", ",", " ", "targets"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9024929885285263`*^9, 3.902493031432911*^9}, {
  3.903171885106619*^9, 3.9031718970792437`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"5446ad54-368e-411b-aeab-e2267ca2a645"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create network with randomly initialized layers", "Subsubsection",
 CellChangeTimes->{{3.90317206515396*^9, 
  3.903172097292447*^9}},ExpressionUUID->"56140d67-e359-4a82-a6f7-\
586c2a625b45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"linearLayer", "[", 
     RowBox[{"2", ",", " ", "2"}], "]"}], ",", 
    RowBox[{"linearLayer", "[", 
     RowBox[{"2", ",", " ", "1"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.901017305750147*^9, 3.901017324897551*^9}, {
   3.901017430713305*^9, 3.90101743255249*^9}, 3.9010226678129377`*^9, {
   3.901022867704577*^9, 3.901022868679647*^9}, {3.9017165701813583`*^9, 
   3.9017165728002443`*^9}, {3.902491126520815*^9, 3.902491128817457*^9}, {
   3.902492112682837*^9, 3.902492112979579*^9}, 3.9024930375242453`*^9, {
   3.902494020856345*^9, 3.902494031733279*^9}, {3.902495795332776*^9, 
   3.90249579561031*^9}, {3.902495829120925*^9, 3.902495830931634*^9}, {
   3.9024964789244537`*^9, 3.902496479415269*^9}, 3.9024965213302727`*^9, {
   3.902496586685092*^9, 3.902496598592475*^9}, {3.9024966796085243`*^9, 
   3.902496699287209*^9}, {3.903116797049548*^9, 3.90311679779836*^9}, {
   3.903116831328376*^9, 3.903116853268544*^9}, {3.903172085846242*^9, 
   3.903172086700157*^9}, {3.903172968373144*^9, 3.903172968941663*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"284bf659-3a88-4949-913c-91cc040489c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Inputs\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"Neurons\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"Weights\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1.2269165250704819`"}], ",", 
          RowBox[{"-", "0.042585532218101046`"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.4543503986166189`"}], ",", 
          RowBox[{"-", "0.011037887649600562`"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"Biases\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.011187572418830989`"}], ",", 
        RowBox[{"-", "0.2814715727362114`"}]}], "}"}]}], ",", 
     RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", "LogisticSigmoid"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Inputs\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"Neurons\"\>", "\[Rule]", "1"}], ",", 
     RowBox[{"\<\"Weights\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.5597515833347478`"}], ",", "0.24085135758995063`"}], 
        "}"}], "}"}]}], ",", 
     RowBox[{"\<\"Biases\"\>", "\[Rule]", 
      RowBox[{"{", "0.06884231127153301`", "}"}]}], ",", 
     RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", "LogisticSigmoid"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.903169189536758*^9, 3.903169411769224*^9, {3.903171878510795*^9, 
   3.9031718989076*^9}, 3.903172099699951*^9, 3.903172988501874*^9, 
   3.903173023692607*^9, 3.9031732420163727`*^9, 3.903439049359277*^9, 
   3.903439281522709*^9, 3.90343955692768*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"c8c4d49a-3650-44b2-8f1d-b855bdc63f97"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Make predictions with untrained network", "Subsubsection",
 CellChangeTimes->{{3.903172105525857*^9, 3.903172115898481*^9}, {
  3.903172178268282*^9, 
  3.903172192943179*^9}},ExpressionUUID->"61202c68-67b1-4bdc-b6c0-\
2566bed0c345"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makePredictions", "[", 
  RowBox[{"network", ",", " ", "inputs"}], "]"}]], "Input",
 CellChangeTimes->{{3.90311665857721*^9, 3.903116662669249*^9}, {
  3.9031730301734343`*^9, 3.903173030663196*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"dd0e6bdc-e3e3-4187-9145-cafd01f05ba0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.47355484071652243`", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.4748779152279516`", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.5052611280244892`", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.5061419559884982`", "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.903116663054599*^9, 3.90311676196434*^9, 3.90311686277427*^9, {
   3.903116934611534*^9, 3.90311695939072*^9}, 3.903169474270211*^9, 
   3.9031697860555964`*^9, {3.903171796252705*^9, 3.9031718262688847`*^9}, 
   3.903171860648109*^9, 3.903171901814107*^9, 3.903173031118395*^9, 
   3.9031732433951397`*^9, 3.903439050568963*^9, 3.903439282580915*^9, 
   3.903439557882256*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"558879d3-a655-4cc2-872d-44558adc0a6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateTotalLoss", "[", 
  RowBox[{"network", ",", " ", "trainingData"}], "]"}]], "Input",
 CellChangeTimes->{{3.9034395762477493`*^9, 3.903439614141391*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"8d6fa170-dfad-4f6e-a658-556a1261e028"],

Cell[BoxData["1.0009536221368571`"], "Output",
 CellChangeTimes->{{3.903439598245541*^9, 3.9034396144093447`*^9}},
 CellLabel->"Out[83]=",ExpressionUUID->"f9d57ede-faea-47bb-b490-00fd2676d373"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train network", "Subsubsection",
 CellChangeTimes->{{3.903172123228034*^9, 
  3.9031721241917973`*^9}},ExpressionUUID->"8598e2fe-e735-4836-9772-\
c10205af5b90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedNetwork", " ", "=", " ", 
   RowBox[{"trainNetwork", "[", "\[IndentingNewLine]", 
    RowBox[{
    "network", ",", "\[IndentingNewLine]", "trainingData", ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<LearningRate\>\"", "->", " ", "learningRate"}], ",", " ", 
     RowBox[{"\"\<LossFunction\>\"", " ", "->", " ", "lossFunction"}], ",", 
     " ", 
     RowBox[{"\"\<BatchSize\>\"", " ", "->", " ", "batchSize"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Epochs\>\"", "->", "epochs"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<ShowProgress\>\"", "->", "True"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9024886771777477`*^9, 3.9024886997283916`*^9}, {
   3.9031666075503902`*^9, 3.9031666359928083`*^9}, {3.903169173173389*^9, 
   3.903169176263535*^9}, {3.9031721289328938`*^9, 3.903172142512114*^9}, 
   3.903439143110564*^9, {3.903439217593555*^9, 3.903439221216392*^9}, 
   3.903439637130521*^9},
 CellLabel->"In[85]:=",ExpressionUUID->"4f576cdc-79c7-4bd2-b925-365f14b7c65f"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 180], 0.005555555555555556]], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1: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
yOptg1HUAThVopQznMWz/XCaRMfjBrv1VJzO6lNzlx3+++CrrD/pD7uXvhe+
xuYno8wuaoqvSzTWt8kyuz2wSqJ57b4WHoiFOXY//bc5v90N82w/Uh8XDlYs
sPsySF4augsW2Xyi49wlaycsSbTr2q6c9opliVZMDto+LwbOkKhp+5q5STvg
G+w+2Hca82M7fJPNs5PyBlgqviXRVQvTvju2wZkSicEDTV5Ew7fZ/esn2xoo
zpKo48nypcFRcDabp/qdSxIj4Tvse+PX36pWiu+y93Mts5q5Fc5h+73b7XTC
FvgeO7838zt/2QzfZ/uzp27faMUPJBrzQbdPZAT8kNVTg9sZzzbBjyQaEPsz
QF/xY4nWL79sEBgOP2H3v0NVJbcRzpXo1ZWLmS0UP5Woy9HqJKcN8DOJlmhd
iTuxHs6TyMz367GqdfBz1r+eJ18erThfolYX3jyKXAsXSNTHdHdD3hr4Bft+
uXx1ZG/FLyXKCJwRERQGv5LoXbp7kRgKF7L54FHxBHXFRez7qtljzmU1/Fqi
JicGjzsTAhezebPi95Nvq+ASlv8mxsssFZey/Bce9dq5En7D5oG85yWFK+C3
EpnnjL9gqPidRIffdYoMWQ6/Z/kRNCk4axlcxs6bK/TrpPgD+57TeBzotRT+
yOaza3qbLgfD5RIlNnlw+m8Q/Emi0nFPn9sp/ixRe5VJ5yNL4AqJcoUy7/JA
uFKiioPV8gjFVRJZH5lquGUx/IX12w71Cc8WwdUSTbCrG9Bb8VeJ3A5OlIMD
4BpW36yLvTL84W/sPiTc7KSp+LtE//5VPZu3EP4hUb8LXieT/eBaiYzrum74
swD+yfrHCJ0AW8W/JJLTXXwO+cK/WX+9XRDwcT5cx+qx6sDGEYr/SHStZM/p
LT5wPTvvmHv5ed5wA1tfJwttA8V/WTyzzHe5F/yP9ZevWbduecKNZBIqXw3u
qFhNpott+iR6ecCNZXI6ETfkijvcRKbJ/ybeVlPcVKbZoT0WznCDm8nk7dur
64l5cHOZbneZ8ap6LtxCpn5vE5NIcUuZzLr337JrDtxKpt+6D4JKXOHWMn0z
2b/QWLG6TKeubQzaMBtuI9NjtZjNj11gDZlO+KoS9RS3lclhTOOXQbNgTZmu
vvDVuTETbseet++9b3vF7WX6kbXmpqcz3EGmkNuGA684wR1lWvqx8mRjxZ1k
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
nWN2E1yWYz19v+SKP8Op7Wq/1ZZ/gstx7LO7saC6EU7d2Vp1o7kBLk+fv7rk
Rmc9nDr5WH+xGJo3gmPbA6Nq5evg1Hu+LpcbVwtX4Nh0Rz8H3Ro4dY1MZdrc
j3BFev5RweKLP8Cp81U273J5D1fiWJfO8W6Pd3Dqn5PF4nZVw5U5Zr09Ryfq
LZz6pPuZuoQ38JEci97yID2tCk5d8FUrMOc1XIVjAxeXrBK+glObfz+x5Hkl
fBTHGk1SHWtewqn1E99tbnsBV6X54GUT968CTv1CuUUgjeaN5piDZJ746Odw
avHzt12mPIOP4djoxR+LjZ/CqfO36c22eQIfy7GJ3tfyV5bDqWfdtrf3LIOr
cexepkpn4GM49Z47g69Gl8LVOVbElPwSH8Gph+QstMp4CB/HMfkdJ3RyH8Cp
I74OmvDoPlyDY5f3H5zypgROveWanlmzCD6eYwkP2zy6ODj1JVNRqiSap8mx
q2HXPo8Uwqnjf1yZO1kAn8Cx1P6CdKNiOPVWhRpVmyL4RI7lJsumuRTCqef+
W2K8pQA+iWOGl1Lqgu/BqVsG/UyMy4drcawjdKnb6Tw4df3eXIPrufDJNP5D
J6gV34VTv3p3Qun5Hbg2x6wkho6tuw2nPrWNP/vnLfgUjiUF/3YdhOZTW57x
SFC4CZ/KMc7szbsJOXDqK6/NZhpkw6fR+314MdkqC04tGzFQ3uUGXIdjvgFO
SVuuw6kFMinTQ67BdTn2oaiyKv4qnPr8j/74s1fg0zmWrqTqnJMJp3Y9rTmt
5DJcj9aDjlEKrzPg1B6xf4c0X4LP4NjUFw/lei7CqVUMg7Wk0byZHIubprhk
7AU4dbxGwr7p6fBZNB73d5aZpcGpf5Ubayw7D59N67v72ujN5+DU1oXr+4LO
wvU5pmBjHhmXCqduC+5XST0DN6C/X3K8OPs0nDrsuFhAySm4Ib1/NxvjqhQ4
dW/iRpmWZLgRx/7ecOr4mwSn7hmp9EUGzTPmmNnCjG8aiXDqMVekBuqfhJvQ
fpZvONH6BJx6T/NMF9fj8DkcU8roPr09AU6tuC36R8Qx+FxaX658dDpxFE59
+03Pw8tH4PNoPmx+Z1N4GE495Enoh+eH4Kb0vEMbwhrj4dQR7RIzug7CGce8
Elt+DUXzqR+3HrivFgefz7FvaxsvzoyFU3NeXSctY+BmHPOLKElcdQBO3TLa
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

      "]]}}, {{{{}, GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{3, 0}, {10000., 0.001487595987615486}], 
           Offset[{2.2204598999315324`, 2.0173145101337195`}, {
            10408.333333333334`, 0.001487595987615486}], 
           Offset[{0, 0}, {10800.491049178441`, 0.005005407016395743}], 
           Offset[{5., 1.1102230246251565`*^-15}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{10., 2.220446049250313*^-15}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{10., 2.220446049250313*^-15}, {10800.491049178441`, 
            0.005005407016395743}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{3, 0}, {10000., 0.001487595987615486}], 
           Offset[{2.2204598999315324`, 2.0173145101337195`}, {
            10408.333333333334`, 0.001487595987615486}], 
           Offset[{0, 0}, {10800.491049178441`, 0.005005407016395743}], 
           Offset[{5., 1.1102230246251565`*^-15}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{10., 2.220446049250313*^-15}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{10., 2.220446049250313*^-15}, {10800.491049178441`, 
            0.005005407016395743}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{73., 8.000000000000016}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{73., -7.999999999999984}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{10., -7.999999999999998}, {10800.491049178441`, 
            0.005005407016395743}], 
           Offset[{10., 8.000000000000002}, {10800.491049178441`, 
            0.005005407016395743}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Training Loss\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{41.5, 9.2148511043888*^-15}, \
{10800.491049178441, 0.005005407016395743}], NCache[
         ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
          ImageScaled[{0.5, 0.5}]]]}]}, {}}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox[
      TagBox["\"Loss\"", HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"Epochs\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->{{All, 98.31767777042388}, {All, All}},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10000.}, {0, 0.061022981622308854`}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.08090169943749476]}},
  Ticks->{Automatic, Automatic}]],
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{
  3.903439644307371*^9},ExpressionUUID->"12cd9224-8336-44ce-9cd6-\
edd9b808e698"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Make predictions from trained network", "Subsubsection",
 CellChangeTimes->{{3.90317217123349*^9, 
  3.903172197089994*^9}},ExpressionUUID->"f2f086bc-9a70-4a2a-93df-\
1f8e877332c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makePredictions", "[", 
  RowBox[{"trainedNetwork", ",", " ", "inputs"}], "]"}]], "Input",
 CellChangeTimes->{{3.90311666381614*^9, 3.903116667386344*^9}, {
  3.9031732591227922`*^9, 3.903173261097753*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"449f97db-7349-4626-9a21-7037f067c1cc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.01127198385381178`", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.9853449673337543`", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.9853545377181844`", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "0.03051686123634081`", "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.90311666777055*^9, 3.903116762525195*^9, 3.903116863344865*^9, {
   3.903116935140586*^9, 3.903116960893592*^9}, 3.903169475591353*^9, 
   3.90316978686847*^9, {3.9031717974750843`*^9, 3.903171826992075*^9}, 
   3.903171861422502*^9, 3.903171913193795*^9, 3.9031732615801086`*^9, 
   3.903439081147806*^9, 3.903439566415917*^9, 3.9034396466463823`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"7b5b30c7-d187-4133-b12c-17b1ef0317c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateTotalLoss", "[", 
  RowBox[{"trainedNetwork", ",", " ", "trainingData"}], "]"}]], "Input",
 CellChangeTimes->{{3.903439619570602*^9, 3.903439621054281*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"f66797b0-885e-4fd0-ae32-c6fbe3f93a2d"],

Cell[BoxData["0.001487595987615486`"], "Output",
 CellChangeTimes->{{3.903439621429747*^9, 3.903439647917275*^9}},
 CellLabel->"Out[87]=",ExpressionUUID->"def198c9-f92b-404c-b48b-4f112e484196"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{779.0943396226414, 928.5283018867924},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.1 Inherited,
FrontEndVersion->"13.2 for Linux x86 (64-bit) (January 31, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"a227bd47-836e-473b-946f-c2bac241dc7a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 221, 4, 81, "Title",ExpressionUUID->"ca3228e6-303f-43ae-8a31-1f1db99b771c"],
Cell[CellGroupData[{
Cell[826, 30, 165, 3, 56, "Section",ExpressionUUID->"04a6c63a-cf94-442e-a622-d92ff422cef2"],
Cell[CellGroupData[{
Cell[1016, 37, 229, 4, 37, "Subsubsection",ExpressionUUID->"ca5b47ac-52a1-4b2e-8d69-d5d72eb6fdb1"],
Cell[1248, 43, 3000, 61, 296, "Code",ExpressionUUID->"aa04fd5b-1529-45b5-bbc3-c5dedb8eb63c"],
Cell[4251, 106, 1011, 21, 81, "Code",ExpressionUUID->"98de876e-a6bf-493a-b3a1-d5a132a89403"],
Cell[5265, 129, 840, 17, 81, "Code",ExpressionUUID->"df87031d-db6b-4bc6-a67b-96b74e737cef"],
Cell[6108, 148, 1857, 40, 215, "Code",ExpressionUUID->"ffda7cc2-d670-4f52-a36a-178124c40009"],
Cell[7968, 190, 1228, 27, 160, "Code",ExpressionUUID->"ce3cf2e0-f924-4902-85f3-cb913ec0358e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9233, 222, 219, 4, 37, "Subsubsection",ExpressionUUID->"4453ef77-2ef7-4647-a1ca-56ec34df56c2"],
Cell[9455, 228, 939, 21, 84, "Code",ExpressionUUID->"c6ffa4c3-d8f5-496a-b9d3-bc3a37c5523c"],
Cell[10397, 251, 1402, 29, 88, "Code",ExpressionUUID->"89769d09-775d-4eca-a696-20f110bf56f9"],
Cell[11802, 282, 1530, 33, 100, "Code",ExpressionUUID->"c978071f-e7a0-4984-9d5d-ac0a34bee3ea"],
Cell[13335, 317, 3902, 80, 343, "Code",ExpressionUUID->"4577cb3b-c01f-4395-9b98-5c9aa7ca6346"],
Cell[17240, 399, 1691, 37, 181, "Code",ExpressionUUID->"6269aca1-c6c8-41b8-aa7d-7582da787ed3"],
Cell[18934, 438, 5020, 90, 432, "Code",ExpressionUUID->"3d3648c8-da14-4990-9872-6260359c2f8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23991, 533, 159, 3, 37, "Subsubsection",ExpressionUUID->"9ae4a78d-7d02-4250-924e-2b4968ff5cc5"],
Cell[24153, 538, 1825, 40, 175, "Code",ExpressionUUID->"ebd0cc6d-a947-4085-b2e7-6757282650d4"],
Cell[25981, 580, 2771, 56, 254, "Code",ExpressionUUID->"55ffb453-17d3-4ee3-8002-929f5b7a7b22"],
Cell[28755, 638, 713, 15, 84, "Code",ExpressionUUID->"21d00233-0056-4aae-8a25-bae8fad87dc2"],
Cell[29471, 655, 2527, 47, 271, "Code",ExpressionUUID->"e345657e-15d6-4d2d-b835-d1f1fe20f2cb"],
Cell[32001, 704, 953, 19, 140, "Code",ExpressionUUID->"686ab6de-c707-4159-adf2-cea8d319cb8a"],
Cell[32957, 725, 1753, 34, 252, "Code",ExpressionUUID->"f7f3a6ff-ea12-46b9-b4b5-5b0e9387a27e"],
Cell[34713, 761, 3208, 65, 292, "Code",ExpressionUUID->"5e2f8e5b-1e6f-4b8c-9ddd-67f584f73e53"],
Cell[37924, 828, 4226, 96, 499, "Code",ExpressionUUID->"c8dfffcf-656d-433f-87a4-eedb6af65f05"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42199, 930, 217, 4, 56, "Section",ExpressionUUID->"de2a3a50-09a3-411f-bc59-c4de8f971870"],
Cell[CellGroupData[{
Cell[42441, 938, 174, 3, 37, "Subsubsection",ExpressionUUID->"f6bd0a29-df71-42f6-9d85-4fddeb38c82a"],
Cell[42618, 943, 1089, 20, 83, "Input",ExpressionUUID->"015174ad-d5c8-4067-b046-6d50c3b4fdff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43744, 968, 198, 3, 37, "Subsubsection",ExpressionUUID->"fbde7219-7543-4864-a528-b68ba5a14a69"],
Cell[43945, 973, 757, 21, 46, "Input",ExpressionUUID->"0111ca61-7b58-4638-92f3-52cdd1d5d194"],
Cell[44705, 996, 428, 10, 30, "Input",ExpressionUUID->"5446ad54-368e-411b-aeab-e2267ca2a645"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45170, 1011, 197, 3, 37, "Subsubsection",ExpressionUUID->"56140d67-e359-4a82-a6f7-586c2a625b45"],
Cell[CellGroupData[{
Cell[45392, 1018, 1210, 20, 30, "Input",ExpressionUUID->"284bf659-3a88-4949-913c-91cc040489c0"],
Cell[46605, 1040, 1869, 44, 64, "Output",ExpressionUUID->"c8c4d49a-3650-44b2-8f1d-b855bdc63f97"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48523, 1090, 239, 4, 37, "Subsubsection",ExpressionUUID->"61202c68-67b1-4bdc-b6c0-2566bed0c345"],
Cell[CellGroupData[{
Cell[48787, 1098, 302, 5, 30, "Input",ExpressionUUID->"dd0e6bdc-e3e3-4187-9145-cafd01f05ba0"],
Cell[49092, 1105, 1109, 27, 27, "Output",ExpressionUUID->"558879d3-a655-4cc2-872d-44558adc0a6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50238, 1137, 263, 4, 30, "Input",ExpressionUUID->"8d6fa170-dfad-4f6e-a658-556a1261e028"],
Cell[50504, 1143, 193, 2, 27, "Output",ExpressionUUID->"f9d57ede-faea-47bb-b490-00fd2676d373"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50746, 1151, 166, 3, 37, "Subsubsection",ExpressionUUID->"8598e2fe-e735-4836-9772-c10205af5b90"],
Cell[50915, 1156, 1061, 20, 123, "Input",ExpressionUUID->"4f576cdc-79c7-4bd2-b925-365f14b7c65f"],
Cell[51979, 1178, 116571, 1964, 146, InheritFromParent,ExpressionUUID->"12cd9224-8336-44ce-9cd6-edd9b808e698"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168587, 3147, 187, 3, 37, "Subsubsection",ExpressionUUID->"f2f086bc-9a70-4a2a-93df-1f8e877332c5"],
Cell[CellGroupData[{
Cell[168799, 3154, 309, 5, 30, "Input",ExpressionUUID->"449f97db-7349-4626-9a21-7037f067c1cc"],
Cell[169111, 3161, 1085, 26, 27, "Output",ExpressionUUID->"7b5b30c7-d187-4133-b12c-17b1ef0317c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170233, 3192, 268, 4, 30, "Input",ExpressionUUID->"f66797b0-885e-4fd0-ae32-c6fbe3f93a2d"],
Cell[170504, 3198, 193, 2, 27, "Output",ExpressionUUID->"def198c9-f92b-404c-b48b-4f112e484196"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

